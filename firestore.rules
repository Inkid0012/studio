
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is a participant of a conversation
    function isParticipant(conversationId) {
      return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }

    // USERS
    // Users can read any profile, but only write to their own.
    // This allows the discover page to function while keeping user data secure.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // CONVERSATIONS
    // Users can read/write conversations they are part of.
    match /conversations/{conversationId} {
      allow read, update: if isAuthenticated() && isParticipant(conversationId);
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;

      // MESSAGES (Subcollection)
      // Users can read/write messages in conversations they are part of.
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(conversationId);
        allow create: if isAuthenticated() && isParticipant(conversationId) && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // CALLS
    // Users can create/update calls they are involved in.
    match /calls/{callId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && (request.auth.uid == request.resource.data.from || request.auth.uid == request.resource.data.to);
        allow update: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }
  }
}
