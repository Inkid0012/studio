
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow anyone to read user profiles (for discover, profile view, etc.)
      allow read: if true;
      
      // Allow a user to create their own document
      allow create: if isOwner(userId);
      
      // Allow a user to update only their own document
      allow update: if isOwner(userId);
      
      // Allow a user to delete their own document
      allow delete: if isOwner(userId);
    }

    match /conversations/{conversationId} {
      // Allow read/write if the user is a participant in the conversation
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Allow a user to create a new conversation only if they are a participant
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
    }

    match /conversations/{conversationId}/messages/{messageId} {
      // Allow a participant to read and write messages in a conversation
      allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    match /calls/{callId} {
      // Allow create for any authenticated user
      allow create: if isAuthenticated();
      // Allow read/update if the user is the caller or receiver
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }
  }
}
