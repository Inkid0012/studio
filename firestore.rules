
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(conversationId) {
        return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read a user's profile.
      allow get: if isAuthenticated();
      
      // Only the document owner can create, update, or delete their own profile.
      allow create, update, delete: if isOwner(userId);
      
      // No one can list all users directly.
      allow list: if false;
    }
    
    // Rules for the 'conversations' collection
    match /conversations/{conversationId} {
      // A user can get a conversation document if they are a participant.
      allow get: if isParticipant(conversationId);
      
      // A user can list conversations they are a part of.
      allow list: if isAuthenticated() && request.auth.uid in query.filters[0][2];
      
      // A user can create a conversation if they are authenticated and their ID is in the participant list.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      // A user can update a conversation (e.g., the lastMessage) if they are a participant.
      allow update: if isParticipant(conversationId);
      
      // Nobody can delete a conversation document.
      allow delete: if false;
      
        // Rules for the 'messages' subcollection
        match /messages/{messageId} {
            // A user can read messages if they are part of the conversation.
            allow get, list: if isParticipant(conversationId);
            
            // A user can create (send) a message if they are part of the conversation.
            allow create: if isParticipant(conversationId) && isOwner(request.resource.data.senderId);
            
            // Messages can be updated (e.g., to mark as read).
            allow update: if isParticipant(conversationId);
            
            // Nobody can delete a message.
            allow delete: if false;
        }
    }
    
    // Rules for the 'calls' collection
    match /calls/{callId} {
        // Only the caller or receiver can access the call document.
        allow get: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
        
        // A user can create a call if they are authenticated and are the caller.
        allow create: if isAuthenticated() && isOwner(request.resource.data.from);
        
        // The caller or receiver can update the call status.
        allow update: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    
        // Nobody can list or delete calls.
        allow list, delete: if false;
    }
  }
}
