rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read all profiles for discovery, but only write to their own.
    match /users/{userId} {
      allow list: if request.auth != null;
      allow get, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Users can only interact with conversations they are a part of.
    match /conversations/{conversationId} {
      allow get, update, delete: if request.auth.uid in resource.data.participantIds;
      // Allow creation if the user is one of the participants.
      allow create: if request.auth.uid in request.resource.data.participantIds;

      // Rules for the messages subcollection.
      match /messages/{messageId} {
        // Allow reading messages if the user is a participant in the parent conversation.
        allow get, list: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Allow creating a message if the user is the sender and a participant.
        allow create: if request.auth.uid == request.resource.data.senderId &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Allow updating a message (e.g., to mark as read) if the user is a participant.
        allow update: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Disallow deleting messages.
        allow delete: if false;
      }
    }
    
    // Calls can be created by an authenticated user and can only be read/updated by participants.
    match /calls/{callId} {
      allow create: if request.auth.uid == request.resource.data.from;
      allow get, update: if request.auth.uid in resource.data.participantIds;
      allow delete: if false;
    }
  }
}
