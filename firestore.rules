rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own data, but anyone can view profiles.
    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Users can only access conversations they are a part of.
    match /conversations/{conversationId} {
      allow get: if request.auth.uid in resource.data.participantIds;
      
      // Allow creation if the user is one of the participants.
      allow create: if request.auth.uid in request.resource.data.participantIds;

      // Allow updates (like lastMessage) only by participants.
      allow update: if request.auth.uid in resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow reads if the user is a participant in the parent conversation.
        allow read: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
        
        // Allow message creation if the user is a participant.
        allow create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);

        // Allow message updates (e.g., for read receipts) if user is a participant.
        allow update: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }

    // Calls can be created by authenticated users, and can only be accessed/updated by participants.
    match /calls/{callId} {
        allow read, update: if request.auth.uid == resource.data.from || request.auth.uid == resource.data.to;
        allow create: if request.auth.uid == request.resource.data.from;
    }
  }
}
